/* Task 1

Встроенная функция `setTimeout` использует колбэк-функции. Создайте альтернативу, использующую промисы.

Функция `delay(ms)` должна возвращать промис, который перейдёт в состояние «выполнен» через `ms` миллисекунд, так чтобы мы могли добавить к нему `.then`:

*/

//Solution
// function delay(ms) {
//     return new Promise((resolve, reject)=>{
//         setTimeout(resolve, ms);
//     })
//   }
  
// delay(3000).then(() => alert('выполнилось через 3 секунды'));


/*Task 2

Что выведет код ниже?

*/

//Solution
// let promise = new Promise(function(resolve, reject) {
//     resolve(1);
  
//     setTimeout(() => resolve(2), 1000);
//   });
  
// promise.then(alert);
//вывело 1, то есть он выполнил только первый resolve


/* Task 3

Являются ли фрагменты кода ниже эквивалентными? Другими словами, ведут ли они себя одинаково во всех обстоятельствах, для всех переданных им обработчиков?
promise.then(f1).catch(f2);
promise.then(f1, f2);

*/

//Solution
//нет, так как у первого выполняется либо резолв либо эксепшн(если будет), у второго такого не будет
